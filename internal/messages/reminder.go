package messages

import (
	"HabitsBot/pkg/utils"
	"fmt"
	"strconv"
)

const (
	ErrorCreateReminder = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
)

func CreateReminderMsg(habitName string, day string, time string) string {
	weekDay, ok := daysOfWeek[day]

	if !ok {
		return ""
	}

	headerMsg := fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ <b>%s</b> —Å–æ–∑–¥–∞–Ω–æ  üéâ\n\n", habitName)
	aboutMsg := fmt.Sprintf("<b>–í—Ä–µ–º—è:</b> %s, %s", weekDay, time)

	return headerMsg + aboutMsg
}

func TimeWhenDoMsg(days, hours, minutes int) string {
	days_ := strconv.Itoa(days)
	hours_ := strconv.Itoa(hours)
	minutes_ := strconv.Itoa(minutes)

	baseMsg := "–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ —á–µ—Ä–µ–∑ "

	if days > 0 {
		baseMsg += days_ + " " + utils.DeclensionDays(days) + " "
	}

	if hours > 0 {
		baseMsg += hours_ + " " + utils.DeclensionHours(hours) + " "
	}

	if minutes > 0 {
		baseMsg += minutes_ + " " + utils.DeclensionMinutes(minutes)
	}

	return baseMsg
}
